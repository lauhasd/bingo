{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","numbers","_","chunk","toConsumableArray","Array","keys","map","k","maxNumbers","cards","fill","card","rows","usedNumbers","row","newRow","forEach","randomChoice","sample","includes","push","state","react_default","a","createElement","className","App_Card","Component","Card","_ref","block","text","split","letter","num","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAKMA,qBACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IAEN,IACMQ,EAAUC,IAAEC,MACVR,OAAAS,EAAA,EAAAT,CAAIU,MAFO,IAEWC,QAAQC,IAAI,SAAAC,GAAC,OAAIA,EAAI,IAC3CC,IAIJC,EAAQL,MAFM,IAEWM,OAVZ,OAYjBD,EAAQA,EAAMH,IAAI,SAAAK,GACd,IAAIC,EAAOR,MAAM,GAAGM,OAChBG,EAAc,GAElB,OAAOD,EAAKN,IAAI,SAAAQ,GACd,IAAIC,EAAS,GAWb,OATAf,EAAQgB,QAAQ,SAAAd,GAEd,IADA,IAAIe,EAAehB,IAAEiB,OAAOhB,GACrBW,EAAYM,SAASF,IAC1BA,EAAehB,IAAEiB,OAAOhB,GAE1BW,EAAYO,KAAKH,GACjBF,EAAOK,KAAKH,KAGPF,MAKbtB,EAAK4B,MAAQ,CAEXZ,MAAOA,EACPD,WAjCiB,GAkCjBR,QAASA,GArCMP,wEAyCV,IACCgB,EAAUb,KAAKyB,MAAfZ,MACR,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZhB,EAAMH,IAAI,SAAAK,GAAI,OAAIW,EAAAC,EAAAC,cAACE,EAAD,CAAMd,KAAMD,cA9CrBgB,cAoDZC,EAAO,SAAAC,GAAc,IAAXjB,EAAWiB,EAAXjB,KACRkB,EAAQ,SAAAC,GAAI,OAAIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,YAAOO,KACpD,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZ,QAAQO,MAAM,IAAI1B,IAAI,SAAA2B,GAAM,OAAIH,EAAMG,MAGvCrB,EAAKN,IAAI,SAAAQ,GACP,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZX,EAAIR,IAAI,SAAA4B,GAAG,OAAIJ,EAAMI,UASrB3C,ICjEK4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a6ee4689.chunk.js","sourcesContent":["import _ from 'lodash';\nimport React, { Component } from 'react';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const maxNumbers = 75,\n          numbers = _.chunk(\n            [...Array(maxNumbers).keys()].map(k => k + 1),\n            maxNumbers / 5\n          ),\n          cardCount = 30;\n\n    let cards = Array(cardCount).fill();\n\n    cards = cards.map(card => {\n        let rows = Array(5).fill(),\n            usedNumbers = [];\n\n        return rows.map(row => {\n          let newRow = [];\n\n          numbers.forEach(chunk => {\n            let randomChoice = _.sample(chunk);\n            while (usedNumbers.includes(randomChoice)) {\n              randomChoice = _.sample(chunk);\n            }\n            usedNumbers.push(randomChoice);\n            newRow.push(randomChoice);\n          });\n\n          return newRow;\n        });\n\n    });\n\n    this.state = {\n      // Card is a 2d array containing the numbers\n      cards: cards,\n      maxNumbers: maxNumbers,\n      numbers: numbers,\n    };\n  }\n\n  render() {\n    const { cards } = this.state;\n    return (\n      <div className=\"App\">\n        {cards.map(card => <Card rows={card} />)}\n      </div>\n    );\n  }\n}\n\nconst Card = ({ rows }) => {\n  const block = text => <div className=\"block\"><span>{text}</span></div>;\n  return (\n    <div className=\"card\">\n      <div className=\"row\">\n        {'BINGO'.split('').map(letter => block(letter))}\n      </div>\n      {\n        rows.map(row => {\n          return (\n            <div className=\"row\">\n              {row.map(num => block(num))}\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}